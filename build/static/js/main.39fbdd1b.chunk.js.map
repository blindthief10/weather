{"version":3,"sources":["components/navList/navList.js","components/citySearch/citySearch.js","config/config.js","components/showCities/showCities.js","components/app/App.js","components/superApp/superApp.js","serviceWorker.js","index.js"],"names":["NavList","react_default","a","createElement","className","NavLink","to","Component","CitySearch","onSubmit","this","props","makeCityRequest","type","onChange","updateCity","value","cityName","colorTemperatures","limitTemp","color","ShowCities","temp","find","obj","_this","allCities","map","info","index","style","background","defineColor","tempInCelsius","key","nameOfCity","description","src","iconAddress","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","citiesShown","bind","assertThisInitialized","event","setState","target","_this2","preventDefault","tempCities","toConsumableArray","url","concat","axios","get","then","cityInfo","weatherData","data","infoUsed","name","Math","round","main","weather","icon","push","history","pathname","_this3","navList_NavList","Route","path","render","_ref","match","location","citySearch_CitySearch","showCities_ShowCities","SuperApp","BrowserRouter","App_App","Boolean","window","hostname","ReactDOM","superApp_SuperApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39fbdd1b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class NavList extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"nav\">\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" to=\"/dist\">Search</NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" to=\"/show\">Show Weather</NavLink>\r\n        </li>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class CitySearch extends Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.makeCityRequest}>\r\n        <div className=\"input-group mb-3 input-group-lg\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">Type a city</span>\r\n          </div>\r\n          <input type=\"text\" className=\"form-control\" onChange={this.props.updateCity} value={this.props.cityName}/>\r\n          <button type=\"submit\" className=\"btn btn-lg btn-primary btn-block\">Search for a weather in a city</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","const colorTemperatures = [\r\n  {limitTemp: 40, color: 'red'},\r\n  {limitTemp: 35, color: 'orange'},\r\n  {limitTemp: 30, color: 'yellow'},\r\n  {limitTemp: 20, color: 'deepskyblue'},\r\n  {limitTemp: 10, color: 'purple'},\r\n  {limitTemp: 0, color: 'grey'},\r\n  {limitTemp: -100, color: 'white'}\r\n];\r\n\r\nexport default colorTemperatures;\r\n","import React, { Component } from 'react';\r\nimport colorTemperatures from '../../config/config';\r\n\r\nexport default class ShowCities extends Component {\r\n\r\n  defineColor(temp) {\r\n    return colorTemperatures.find(obj => temp >= obj.limitTemp).color;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid d-flex flex-lg-row flex-md-column justify-content-start flex-wrap\">\r\n      {this.props.allCities.map((info, index) => {\r\n        return (\r\n          <div style={{background: this.defineColor(info.tempInCelsius)}} key={index} className=\"card w-xl-25 w-md-100 my-md-4 mx-lg-4\">\r\n            <div className=\"card-header\">\r\n              <h4 className=\"title text-center text-dark\">{info.nameOfCity}</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <p className=\"lead\">Temperature is {info.tempInCelsius}<sup> o</sup>c</p>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n              <p className=\"lead text-dark\">{info.description} <img src={info.iconAddress} /></p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport axios from 'axios';\nimport NavList from '../navList/navList';\nimport CitySearch from '../citySearch/citySearch';\nimport ShowCities from '../showCities/showCities';\nconst authToken = '16d4785f9c10724266053adb3c29dcfd';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {cityName: '', citiesShown: []};\n    this.updateCity = this.updateCity.bind(this);\n    this.makeCityRequest = this.makeCityRequest.bind(this);\n  }\n\n  updateCity(event) {\n    this.setState({cityName: event.target.value});\n  }\n\n  makeCityRequest(event) {\n    event.preventDefault();\n    const tempCities = [...this.state.citiesShown];\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&APPID=${authToken}`;\n    axios.get(url)\n      .then(cityInfo => {\n        const weatherData = cityInfo.data;\n        const infoUsed = {\n          nameOfCity: weatherData.name,\n          tempInCelsius: Math.round(weatherData.main.temp - 273),\n          description: weatherData.weather[0].description,\n          iconAddress: `http://openweathermap.org/img/w/${weatherData.weather[0].icon}.png`\n        }\n        tempCities.push(infoUsed);\n        this.setState({citiesShown: tempCities, cityName: ''});\n      })\n      this.props.history.push({pathname: '/show'});\n\n  }\n\n  render() {\n    return (\n        <div className=\"container\">\n            <NavList />\n            <div className=\"jumbotron\">\n              <Route path=\"/dist\" render={({match, history, location}) => <CitySearch updateCity={this.updateCity} cityName={this.state.cityName} makeCityRequest={this.makeCityRequest}/>} />\n              <Route path=\"/show\" render={() => <ShowCities allCities={this.state.citiesShown} />}/>\n            </div>\n        </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport App from '../app/App';\r\n\r\nexport default class SuperApp extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Route path=\"/\" render={({match, history, location}) => <App history={history}/>} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport SuperApp from './components/superApp/superApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SuperApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}